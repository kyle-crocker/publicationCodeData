import sys
sys.path.append('/home/kyle/microbial_ecology/custom_functions/')
import nitrite_toxicity_model as ntm
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import scipy.io
from scipy.optimize import minimize
from scipy.optimize import NonlinearConstraint
import denitfit as dn
import glob
import matplotlib as mpl
import numpy as np
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings("ignore")#, category=FutureWarning)

tick_label_size = 9
font_size = 11
alpha = 0.8
#mpl.rcParams['axes.linewidth'] = 4.0 #set the value globally
#plt.style.use('dark_background')
#plt.rcParams.update({"text.usetex": False, 'font.size': 16})
#linewidth = 4.0
#plt.rc('text', usetex=True)


plt.rcParams['svg.fonttype'] = 'none'
plt.rcParams['axes.linewidth'] = 1
plt.rcParams['xtick.labelsize'] = 40
plt.rcParams['text.usetex'] = False
plt.rcParams['font.size'] = 42
plt.rcParams['font.family'] = 'Arial'


def plotDenit(p,y0,t,n=1, tick_labels=True, axes_labels=True):
    lines = np.array([[0.000,0.447,0.741],[0.850,0.325,0.098]])
    #plt.rcParams.update({"text.usetex": False, 'font.size': 16, "font.sans-serif": ["Helvetica"]});

    th = np.linspace(t[0],t[1],256)
    yh = dn.denitODE(y0,th,p,n)

    plt.plot(th,yh[:,-2],'-',color=(lines[0,0],lines[0,1],lines[0,2]),linewidth=4,alpha=0.5)
    plt.plot(th,yh[:,-1],'-',color=(lines[1,0],lines[1,1],lines[1,2]),linewidth=4,alpha=0.5)

    if tick_labels==True:
        plt.xticks([0,8,16,32,64])
        plt.yticks([0,0.5,1,1.5,2])
    else:
        plt.xticks([])
        plt.yticks([])

    if axes_labels==True:
        plt.xlabel('time (h)')
        plt.ylabel('NO$_2^-$, NO$_3^-$ (mM)')

def neg_fitness(x):
    return -1.0*(x[0] + x[1])

def pareto_front(x,k,b,c,d):
    return ((d - b*x**k )/c)**(1.0/k)

def fitness(x):
    return x[0] + x[1]

def phys_constraint_old(x,y,a,b,c,d):
    #uses elastic net cost function as physiological constraint function 
    return (1-a)*((b*x)**2 + (c*y)**2) + a*(b*x + c*y) - d;

def phys_constraint(x,y,k,b,c,d):
    #print(d)
    return (b*x**k + c*y**k) - d;

def get_Itox_array(rAs, rA_thresh, Itox_min, Itox_max):
    Itox_vals = []
    for rA in rAs:
        if rA > rA_thresh:
            Itox_vals.append(Itox_min)
        else:
            Itox_vals.append(Itox_max)
    return Itox_vals

def get_Itox(rA, rA_thresh, Itox_min, Itox_max):
    if rA > rA_thresh:
        Itox_vals = Itox_min
    else:
        Itox_vals = Itox_max
    return Itox_vals

def cons_f(x):
    return phys_constraint(x[0],x[1],a,b,c,d)

def get_dr(rAs, rel_abs, ab_thresh):
    drs = []
    rAs_avg = []
    max_rel_ab = 0
    second_max_rel_ab = 0
    max_idx = None
    second_max_idx = None
    for i in range(len(rel_abs)):
        #print(rel_abs[i])
        if rel_abs[i] > max_rel_ab:
            max_idx = i
            max_rel_ab = rel_abs[i]
            #print('max idx = ' + str(max_idx))
        elif rel_abs[i] > second_max_rel_ab:
            second_max_idx = i
            second_max_rel_ab = rel_abs[i]
            #print('second max idx = ' + str(second_max_idx))
    if second_max_idx == None:
        second_max_idx = max_idx - 1
    for i in range(len(rAs) - 1):
        #print('rAs = ' + str(rAs[i]))
        #print('rel abs =  ' + str(rel_abs[i]))
        #print('')
    
        rel_abs_1 = rel_abs[i+1]
        rel_abs_0 = rel_abs[i]
        if np.abs(rel_abs_1) < ab_thresh:
            rel_abs_1 = 0
        if np.abs(rel_abs_0) < ab_thresh:
            rel_abs_0 = 0
        rAs_avg.append((rAs[i+1] + rAs[i])/2)
        drs.append((rel_abs_1 - rel_abs_0))
    num_roots = 0
    drs_finite = []
    peak_indices = []
    orig_indices = []
    for i in range(len(drs)):
        if drs[i] != 0:
            drs_finite.append(drs[i])
            orig_indices.append(i)
    for i in range(len(drs_finite) - 1):
        if drs_finite[i+1]*drs_finite[i] < 0:
            num_roots = num_roots + 1
            peak_indices.append(orig_indices[i])
    if drs_finite[-1] <	0:
        num_roots = -1*num_roots
    #print(peak_indices)
    if len(peak_indices) ==1:
        max_idx = peak_indices[0]+1
        second_max_idx = len(rAs) - 2
    elif len(peak_indices) ==3:
        max_idx = peak_indices[1]
        second_max_idx = peak_indices[2]+1
    '''
    print(num_roots)
    print(max_idx)
    print(rAs[max_idx])
    print(second_max_idx)
    print(rAs[second_max_idx])
    print('')
    '''
    return rAs_avg, drs, num_roots, max_idx, second_max_idx



def get_phen_dist(k, rA_thresh, f, I_tox_min, I_tox_max, n_strains, ab_thresh, rd_max, n_cycles_real=12, plot=True):#, output_dir = None):#, output_dir_2 = 'breakthrough'):
    #f = float(sys.argv[3])
    #n_strains = int(sys.argv[6])
    r_lim = np.asarray([0,1.1])
    r_thresh = 0
    #gam_lim = np.asarray([0,0.05])/f
    a = k# float(sys.argv[1])
    b = 1
    c = 1
    d = 1
    #rA_thresh = float(sys.argv[2])
    epsilon = 0.01 #how far points can be from the constraint curve
    #print(rd_max)
    #rA_max = 7.3
    #rI_max = 7.4
    kA = 0.01
    kI = 0.01
    #gamA = 0.013
    #gamI = 0.015
    N0 = 0.01
    N0_dead = 0
    tlag = 0
    offset = 0
    alphaA = 100.0
    ItoxA = 100.0
    #alphaI = 5.0                                                                                                                                                                                     
    alphaI = 100.0
    #ItoxI = 8.0                                                                                                                                                                                      
    ItoxI = 100.0
    #rd_max = 0.04 #get from experiment
    #Itoxd = 100.0
    #Itoxd = 10.0                                                                                                                                                                                     
    alphad = 10000.0
    #alphad = 10.0
    #I_tox_min = float(sys.argv[4])
    #I_tox_max = float(sys.argv[5])
    rAs_orig = np.linspace(0,1, n_strains)
    #np.random.seed(seed=1)
    #brute force randomly generate phenotypes near the constraint curve
    p = []
    rs = np.zeros((n_strains,2))
    for i in range(0,n_strains):
        rA = rAs_orig[i]
        rI = pareto_front(rA,a,b,c,d)
        gamA = 0.02
        gamI = 0.02
        Itoxd = get_Itox(rA*f, rA_thresh, I_tox_min, I_tox_max)
        test_params = np.zeros(17)
        test_params[0] = rA*f
        test_params[1] = rI*f
        test_params[2] = kA
        test_params[3] = kI
        test_params[4] = gamA
        test_params[5] = gamI
        test_params[6] = N0
        test_params[7] = tlag
        test_params[8] = offset
        test_params[9] = alphaA
        test_params[10] = ItoxA
        test_params[11] = alphaI
        test_params[12] = ItoxI
        test_params[13] = rd_max
        test_params[14] = alphad
        test_params[15] = Itoxd
        test_params[16] = N0_dead

        p.append(test_params)
        #mus[i,:] = [rA*gamA,rI*gamI]
        rs[i,:] = [rA*f,rI*f]

    parray = np.asarray(p)


    t_growth = np.linspace(0,72, num = 100)
    #simulate 128 cycles of serial enrichment
    #n_cycles_real = 12
    n_cycles = n_cycles_real + 1
    dilution_factor = 8;
    nk = np.zeros((n_cycles,n_strains))
    nk[0,:] = 0.01
    ndead = np.zeros((n_cycles,n_strains))
    ndead[0,:] = 0
    A0 = 2.0
    I0 = 0.0
    A_vals = np.zeros((n_cycles-1, len(t_growth)))
    I_vals = np.zeros((n_cycles-1, len(t_growth)))

    A = np.zeros(n_cycles)
    I = np.zeros(n_cycles)
    #idx = np.argsort(nk[-1,:])
    t_vals = []
    for k in range(1,n_cycles):
        t_vals.append(t_growth + (k-1)*t_growth[-1])
        #print('cycle ' + str(k))
        y0 = []
        for i in range(n_strains):
            y0.append(nk[k-1,i])
            y0.append(ndead[k-1,i])
        y0.append(A0*(1.0 - 1.0/dilution_factor)+A[k-1]/dilution_factor)
        y0.append(I0*(1.0 - 1.0/dilution_factor)+I[k-1]/dilution_factor)
        yh = ntm.denitODE(y0,t_growth,p,n_strains)
        A_vals[k-1,:] = yh[:,-2]
        I_vals[k-1,:] = yh[:,-1]
        for i in range(n_strains):
            nk[k,i] = yh[-1,i*2]/dilution_factor
            ndead[k,i] = yh[-1,i*2+1]/dilution_factor
            A[k] = yh[-1,-2]
            I[k] = yh[-1,-1]
    #print(nk[-1,:])   
    t_vals = np.asarray(t_vals)
    #t_vals.flatten()
    nk[-1,:] = nk[-1,:]/np.sum(nk[-1,:])
    rAs_avg, drs, num_roots, max_idx, second_max_idx = get_dr(parray[:,0], nk[-1,:], ab_thresh)
    #idx = np.argsort(nk[-1,:])
    idx = np.argsort(nk[-1,:])
    color = 'maroon'
    #axs[1][1].scatter(parray[idx,0],parray[idx,1],c=(nk[-1,idx]),cmap='Reds')

    #if you want to plot
    if plot:
        plt.cla()
        
        plt.rcParams['svg.fonttype'] = 'none'
        plt.rcParams['axes.linewidth'] = 1
        plt.rcParams['xtick.labelsize'] = tick_label_size
        plt.rcParams['text.usetex'] = False
        plt.rcParams['font.size'] = font_size
        plt.rcParams['font.family'] = 'Arial'

        fig, axs = plt.subplots(1,1,figsize=(3.5,3), sharex = False, sharey = False)
        axs.scatter(parray[:,0],parray[:,1],c=(nk[-1,:]),cmap='Reds', edgecolors = 'black', label = 'phenotype')
        axs.legend(loc= 'upper right')
        #axs.scatter(parray[:,0],parray[:,1],c='k')#, edgecolors = 'black')
        axs.set_xlabel('rA (mM/OD/hr)')
        axs.set_ylabel('rI (mM/OD/hr)')
        #axs.set_title('max_idx='+str(max_idx)+', second_max_idx='+str(second_max_idx), fontsize = 12)
        ax2 = axs.twinx()
        ax2.bar(parray[:,0], nk[-1,:], width = 3.0/n_strains, color = color, alpha = .75)
        ax2.set_ylim([0,0.6])
        ax2.set_ylabel('rel. ab.', color = color)
        ax2.tick_params(axis='y', labelcolor=color)
        fig.tight_layout()
        plt.savefig('rel_ab_plots/k='+str(a)+'_rA_thresh='+str(rA_thresh)+'_f='+str(f)+'_I_tox_min='+str(I_tox_min)+'_I_tox_max='+str(I_tox_max)+'_n_strains='+str(n_strains)+'_ab_thresh='+str(ab_thresh)+'_rd_max='+str(rd_max)+'_n_cycles_real='+str(n_cycles_real)+'.svg')  #k, rA_thresh, f, I_tox_min, I_tox_max, n_strains, ab_thresh, rd_max, n_cycles_real = 12
        plt.savefig('rel_ab_plots/k='+str(a)+'_rA_thresh='+str(rA_thresh)+'_f='+str(f)+'_I_tox_min='+str(I_tox_min)+'_I_tox_max='+str(I_tox_max)+'_n_strains='+str(n_strains)+'_ab_thresh='+str(ab_thresh)+'_rd_max='+str(rd_max)+'_n_cycles_real='+str(n_cycles_real)+'.png')  #k, rA_thresh, f, I_tox_min, I_tox_max, n_strains, ab_thresh, rd_max, n_cycles_real = 12
        plt.cla()
        
        max_indices = [max_idx, second_max_idx]
        #print(max_idx)
        #print(second_max_idx)
        
        if rAs_orig[max_idx] > rAs_orig[second_max_idx]:
            colors = ['tab:blue', 'tab:orange']
        else:
            colors = ['tab:orange', 'tab:blue']
        p_maxs = []
        for i in max_indices:
            rA = rAs_orig[i]
            #print('one rA for coculture is ' + str(rA*f))
            rI = pareto_front(rA,a,b,c,d)
            gamA = 0.02
            gamI = 0.02
            Itoxd = get_Itox(rA*f, rA_thresh, I_tox_min, I_tox_max)
            test_params = np.zeros(17)
            test_params[0] = rA*f
            test_params[1] = rI*f
            test_params[2] = kA
            test_params[3] = kI
            test_params[4] = gamA
            test_params[5] = gamI
            test_params[6] = N0
            test_params[7] = tlag
            test_params[8] = offset
            test_params[9] = alphaA
            test_params[10] = ItoxA
            test_params[11] = alphaI
            test_params[12] = ItoxI
            test_params[13] = rd_max
            test_params[14] = alphad
            test_params[15] = Itoxd
            test_params[16] = N0_dead
            p_maxs.append(test_params)

        #####################################################
        #simulate 128 cycles of serial enrichment for Nar+Nap
        ####################################################
        t_growth = np.linspace(0,72, num = 100)
        #n_cycles_real = 12
        #n_cycles = n_cycles_real + 1
        n_cycles = 5
        dilution_factor = 8;
        nk = np.zeros((n_cycles,2))
        #nk[0,:] = 0.01
        nk[0,:] = 0.005
        ndead = np.zeros((n_cycles,2))
        ndead[0,:] = 0
        A0 = 2.0
        I0 = 0.0
        A_vals = np.zeros((n_cycles-1, len(t_growth)))
        I_vals = np.zeros((n_cycles-1, len(t_growth)))

        A = np.zeros(n_cycles)
        I = np.zeros(n_cycles)
        #idx = np.argsort(nk[-1,:])
        t_vals = []
        for k in range(1,n_cycles):
            t_vals.append(t_growth + (k-1)*t_growth[-1])
            #print('cycle ' + str(k))
            y0 = []
            for i in range(2):
                y0.append(nk[k-1,i])
                y0.append(ndead[k-1,i])
            y0.append(A0*(1.0 - 1.0/dilution_factor)+A[k-1]/dilution_factor)
            y0.append(I0*(1.0 - 1.0/dilution_factor)+I[k-1]/dilution_factor)
            yh = ntm.denitODE(y0,t_growth,p_maxs,n=2)
            A_vals[k-1,:] = yh[:,-2]
            I_vals[k-1,:] = yh[:,-1]
            for i in range(2):
                nk[k,i] = yh[-1,i*2]/dilution_factor
                ndead[k,i] = yh[-1,i*2+1]/dilution_factor
                A[k] = yh[-1,-2]
                I[k] = yh[-1,-1]
                #print(nk[-1,:])   
        t_vals = np.asarray(t_vals)
        #t_vals.flatten()
        #nk[-1,:] = nk[-1,:]/np.sum(nk[-1,:])

        plt.cla()
        linewidth = 2.0
        plt.rcParams['svg.fonttype'] = 'none'
        plt.rcParams['axes.linewidth'] = 1
        plt.rcParams['xtick.labelsize'] = tick_label_size
        plt.rcParams['text.usetex'] = False
        plt.rcParams['font.size'] = font_size
        plt.rcParams['font.family'] = 'Arial'

        fig, axs = plt.subplots(1,1,figsize=(3.25,3), sharex = False, sharey = False)
        Nar_co_OD = None
        Nap_co_OD = None
        for i in range(len(max_indices)):
            if colors[i] == 'tab:blue':
                axs.plot(range(0, n_cycles),nk[:, i], linewidth = linewidth, color = 'tab:purple', label = 'PD Nar+ co.', alpha = alpha)
                Nar_co_OD = nk[-1,i]
                Nar_co_ODs = nk[:,i]
            else:
                Nap_co_OD = nk[-1,i]
                Nap_co_ODs = nk[:,i]
        axs.set_ylabel('Endpt. biomass [OD600]')
        axs.set_xlabel('cycle')
        #axs.set_title('max_idx='+str(max_idx)+', second_max_idx='+str(second_max_idx), fontsize = 12)
        #fig.tight_layout()
        #plt.savefig(output_dir+'/coculture_ODs_k='+str(a)+'_rA_thresh='+str(rA_thresh)+'_f='+str(f)+'_I_tox_min='+str(I_tox_min)+'_I_tox_max='+str(I_tox_max)+'_n_strains='+str(n_strains)+'_ab_thresh='+str(ab_thresh)+'_rd_max='+str(rd_max)+'_n_cycles_real='+str(n_cycles_real)+'.png')  #k, rA_thresh, f, I_tox_min, I_tox_max, n_strains, ab_thresh, rd_max, n_cycles_real = 12
        #plt.cla()

        #########################
        #now do monocultures#####
        ##########################
        rAs_mono = []
        for i in range(2):
            rAs_mono.append(p_maxs[i][0])
            t_growth = np.linspace(0,72, num = 100)
            #simulate 128 cycles of serial enrichment
            #n_cycles_real = 12
            #n_cycles = n_cycles_real + 1
            n_cycles = 5
            dilution_factor = 8;
            nk = np.zeros((n_cycles,2))
            nk[0,:] = 0.01
            ndead = np.zeros((n_cycles,2))
            ndead[0,:] = 0
            A0 = 2.0
            I0 = 0.0
            A_vals = np.zeros((n_cycles-1, len(t_growth)))
            I_vals = np.zeros((n_cycles-1, len(t_growth)))

            A = np.zeros(n_cycles)
            I = np.zeros(n_cycles)
            #idx = np.argsort(nk[-1,:])
            t_vals = []
            for k in range(1,n_cycles):
                t_vals.append(t_growth + (k-1)*t_growth[-1])
                #print('cycle ' + str(k))
                y0 = []
                y0.append(nk[k-1,i])
                y0.append(ndead[k-1,i])
                y0.append(A0*(1.0 - 1.0/dilution_factor)+A[k-1]/dilution_factor)
                y0.append(I0*(1.0 - 1.0/dilution_factor)+I[k-1]/dilution_factor)
                #print('max value rA is ' + str(p_maxs[i][0]))
                yh = ntm.denitODE(y0,t_growth,p_maxs[i],n=1)
                A_vals[k-1,:] = yh[:,-2]
                I_vals[k-1,:] = yh[:,-1]
                nk[k,i] = yh[-1,0]/dilution_factor
                ndead[k,i] = yh[-1,1]/dilution_factor
                A[k] = yh[-1,-2]
                I[k] = yh[-1,-1]
                #print(nk[-1,:])
            t_vals = np.asarray(t_vals)
            #t_vals.flatten()
            #nk[-1,:] = nk[-1,:]/np.sum(nk[-1,:])
            if colors[i] == 'tab:blue':
                Nar_mono_OD = nk[-1,i]
                label_val = 'PD Nar+ mono.'
            else:
                Nap_mono_OD = nk[-1,i]
                label_val = 'RH Nap+ mono.'
            axs.plot(range(0, n_cycles),nk[:, i], linewidth = linewidth, color = colors[i], label = label_val, alpha = alpha)
        axs.set_ylim([0, 0.0105])
        axs.legend()
        fig.tight_layout()
        #plt.title('rAs='+str(rAs_mono))
        plt.savefig('rel_ab_plots/monoculture_ODs_k='+str(a)+'_rA_thresh='+str(rA_thresh)+'_f='+str(f)+'_I_tox_min='+str(I_tox_min)+'_I_tox_max='+str(I_tox_max)+'_n_strains='+str(n_strains)+'_ab_thresh='+str(ab_thresh)+'_rd_max='+str(rd_max)+'_n_cycles_real='+str(n_cycles_real)+'.png')  #k, rA_thresh, f, I_tox_min, I_tox_max, n_strains, ab_thresh, rd_max, n_cycles_real = 12
        #print(Nar_mono_OD)
        #print(Nar_co_OD)
        #breakthrough = True
        plt.savefig('rel_ab_plots/monoculture_ODs_rAs='+str(rAs_mono)+'_k='+str(a)+'_rA_thresh='+str(rA_thresh)+'_f='+str(f)+'_I_tox_min='+str(I_tox_min)+'_I_tox_max='+str(I_tox_max)+'_n_strains='+str(n_strains)+'_ab_thresh='+str(ab_thresh)+'_rd_max='+str(rd_max)+'_n_cycles_real='+str(n_cycles_real)+'.png')  #k, rA_thresh, f, I_tox_min, I_tox_max, n_strains, ab_thresh, rd_max, n_cycles_real = 12
        plt.savefig('rel_ab_plots/monoculture_ODs_rAs='+str(rAs_mono)+'_k='+str(a)+'_rA_thresh='+str(rA_thresh)+'_f='+str(f)+'_I_tox_min='+str(I_tox_min)+'_I_tox_max='+str(I_tox_max)+'_n_strains='+str(n_strains)+'_ab_thresh='+str(ab_thresh)+'_rd_max='+str(rd_max)+'_n_cycles_real='+str(n_cycles_real)+'.svg')  #k, rA_thresh, f, I_tox_min, I_tox_max, n_strains, ab_thresh, rd_max, n_cycles_real = 12
        plt.cla()
        #####################################################
        #simulate 4 cycles of serial enrichment for Nar+Nap
        ####################################################
        f0_Naps = np.linspace(0.05,0.95, 11)
        plt.rcParams['svg.fonttype'] = 'none'
        plt.rcParams['axes.linewidth'] = 1
        plt.rcParams['xtick.labelsize'] = tick_label_size
        plt.rcParams['text.usetex'] = False
        plt.rcParams['font.size'] = font_size
        plt.rcParams['font.family'] = 'Arial'

        fig, axs = plt.subplots(1,1,figsize=(3.25,3), sharex = False, sharey = False)
        for j in range(len(f0_Naps)):
            t_growth = np.linspace(0,72, num = 100)
            #n_cycles_real = 12
            #n_cycles = n_cycles_real + 1
            n_cycles = 5
            dilution_factor = 8;
            nk = np.zeros((n_cycles,2))
            #nk[0,:] = 0.01
            for i in range(2):
                if colors[i] == 'tab:blue': #Nar strain
                    nk[0,i] = 0.01 - f0_Naps[j]*0.01
                else: #Nap strain
                    nk[0,i] = 0.01*f0_Naps[j]
            ndead = np.zeros((n_cycles,2))
            ndead[0,:] = 0
            A0 = 2.0
            I0 = 0.0
            A_vals = np.zeros((n_cycles-1, len(t_growth)))
            I_vals = np.zeros((n_cycles-1, len(t_growth)))

            A = np.zeros(n_cycles)
            I = np.zeros(n_cycles)
            #idx = np.argsort(nk[-1,:])
            t_vals = []
            for k in range(1,n_cycles):
                t_vals.append(t_growth + (k-1)*t_growth[-1])
                #print('cycle ' + str(k))
                y0 = []
                for i in range(2):
                    y0.append(nk[k-1,i])
                    y0.append(ndead[k-1,i])
                y0.append(A0*(1.0 - 1.0/dilution_factor)+A[k-1]/dilution_factor)
                y0.append(I0*(1.0 - 1.0/dilution_factor)+I[k-1]/dilution_factor)
                yh = ntm.denitODE(y0,t_growth,p_maxs,n=2)
                A_vals[k-1,:] = yh[:,-2]
                I_vals[k-1,:] = yh[:,-1]
                for i in range(2):
                    nk[k,i] = yh[-1,i*2]/dilution_factor
                    ndead[k,i] = yh[-1,i*2+1]/dilution_factor
                    A[k] = yh[-1,-2]
                    I[k] = yh[-1,-1]
                    #print(nk[-1,:])   
            t_vals = np.asarray(t_vals)
            #t_vals.flatten()
            #nk[-1,:] = nk[-1,:]/np.sum(nk[-1,:])

            linewidth = 2.0
            Nar_co_OD = None
            Nap_co_OD = None
            for i in range(len(max_indices)):
                if colors[i] == 'tab:blue':
                    #axs.plot(range(0, n_cycles),nk[:, i], linewidth = linewidth, color = 'tab:purple', label = 'Nar co OD')
                    Nar_co_OD = nk[-1,i]
                    Nar_co_ODs = nk[:,i]
                else:
                    Nap_co_OD = nk[-1,i]
                    Nap_co_ODs = nk[:,i]
            axs.set_xlabel('OD')
            axs.set_ylabel('cycle')
            if num_roots == -1:
                axs.plot(range(0, n_cycles),Nar_co_ODs/(Nap_co_ODs+Nar_co_ODs), linewidth = linewidth, color = 'tab:orange', alpha = alpha)#, label = 'Nar rel. ab.')
            elif num_roots == -3:
                axs.plot(range(0, n_cycles),Nar_co_ODs/(Nap_co_ODs+Nar_co_ODs), linewidth = linewidth, color = 'tab:purple', alpha = alpha)#, label = 'Nar rel. ab.')
            else:
                axs.plot(range(0, n_cycles),Nar_co_ODs/(Nap_co_ODs+Nar_co_ODs), linewidth = linewidth, color = 'tab:purple', alpha = alpha)#, label = 'Nar rel. ab.')
            #axs.plot(range(0, n_cycles),Nar_co_ODs/(Nap_co_ODs+Nar_co_ODs), linewidth = linewidth, color = 'tab:blue', label = 'Nar rel. ab.')
        axs.set_ylim([0,1])
        plt.ylabel('PD Nar+ rel. ab.')
        plt.xlabel('cycle')
        fig.tight_layout()
        plt.savefig('rel_ab_plots/coculture_rel_abs_rAs='+str(rAs_mono)+'_k='+str(a)+'_rA_thresh='+str(rA_thresh)+'_f='+str(f)+'_I_tox_min='+str(I_tox_min)+'_I_tox_max='+str(I_tox_max)+'_n_strains='+str(n_strains)+'_ab_thresh='+str(ab_thresh)+'_rd_max='+str(rd_max)+'_n_cycles_real='+str(n_cycles_real)+'.png')  #k, rA_thresh, f, I_tox_min, I_tox_max, n_strains, ab_thresh, rd
        plt.savefig('rel_ab_plots/coculture_rel_abs_rAs='+str(rAs_mono)+'_k='+str(a)+'_rA_thresh='+str(rA_thresh)+'_f='+str(f)+'_I_tox_min='+str(I_tox_min)+'_I_tox_max='+str(I_tox_max)+'_n_strains='+str(n_strains)+'_ab_thresh='+str(ab_thresh)+'_rd_max='+str(rd_max)+'_n_cycles_real='+str(n_cycles_real)+'.svg')  #k, rA_thresh, f, I_tox_min, I_tox_max, n_strains, ab_thresh, rd
        plt.cla()
    
    p_dist = 0
    num_diffs = 0
    for i in range(len(nk[-1,:])):
        for j in range(len(nk[-1,:])):
            if i == j:
                pass
            else:
                p_dist = p_dist + 0.5*nk[-1,i] * nk[-1,j] * np.sqrt((parray[i,0] - parray[j,0])**2 + (parray[i,1] - parray[j,1])**2)
                num_diffs = num_diffs + 1
    #p_dist = p_dist/num_diffs
    return p_dist, num_roots#, breakthrough
'''
def get_phen_dist_rand_phens(k, rA_thresh, f, I_tox_min, I_tox_max, n_strains, ab_thresh, rd_max, n_cycles_real = 12, plot=True, output_dir = None, output_dir_2 = 'breakthroug'): #agrees with calc_phenotypic_distance.py as of 20220826
    #f = float(sys.argv[3])

    #n_strains = int(sys.argv[6])
    r_lim = np.asarray([0,1.1])
    r_thresh = 0
    #gam_lim = np.asarray([0,0.05])/f
    a = k# float(sys.argv[1])
    b = 1
    c = 1
    d = 1
    #rA_thresh = float(sys.argv[2])
    epsilon = 0.01 #how far points can be from the constraint curve

    #rA_max = 7.3
    #rI_max = 7.4
    kA = 0.01
    kI = 0.01
    #gamA = 0.013
    #gamI = 0.015
    N0 = 0.01
    N0_dead = 0
    tlag = 0
    offset = 0
    alphaA = 100.0
    ItoxA = 100.0
    #alphaI = 5.0                                                                                                                                                                                     
    alphaI = 100.0
    #ItoxI = 8.0                                                                                                                                                                                      
    ItoxI = 100.0
    #rd_max = 1.0 #get from experiment
    #Itoxd = 100.0
    #Itoxd = 10.0                                                                                                                                                                                     
    alphad = 10000.0
    #alphad = 10.0
    #I_tox_min = float(sys.argv[4])
    #I_tox_max = float(sys.argv[5])

    #np.random.seed(seed=1)
    #brute force randomly generate phenotypes near the constraint curve
    p = []
    rs = np.zeros((n_strains,2))
    for i in range(0,n_strains):
        rA = 1
        rI = 0
        gamA = 1
        gamI = 0
        #while (phys_constraint(rA*gamA,rI*gamI,a,b,c,d) >= 0) or (phys_constraint(rA*gamA,rI*gamI,a,b,c,d) < - epsilon):
        while (phys_constraint(rA,rI,a,b,c,d) >= 0) or (phys_constraint(rA,rI,a,b,c,d) < - epsilon):
            rA = np.random.uniform(low=r_lim[0],high=r_lim[1])
            if rA <= r_thresh:
                rA = 0.0
            rI = np.random.uniform(low=r_lim[0],high=r_lim[1])
            if rI <= r_thresh:
                rI = 0.0
            #gamA = np.random.uniform(low=gam_lim[0],high=gam_lim[1])
            #gamI = np.random.uniform(low=gam_lim[0],high=gam_lim[1])
            gamA = 0.02
            gamI = 0.02
        Itoxd = get_Itox(rA*f, rA_thresh, I_tox_min, I_tox_max)
        test_params = np.zeros(17)
        test_params[0] = rA*f
        test_params[1] = rI*f
        test_params[2] = kA
        test_params[3] = kI
        test_params[4] = gamA
        test_params[5] = gamI
        test_params[6] = N0
        test_params[7] = tlag
        test_params[8] = offset
        test_params[9] = alphaA
        test_params[10] = ItoxA
        test_params[11] = alphaI
        test_params[12] = ItoxI
        test_params[13] = rd_max
        test_params[14] = alphad
        test_params[15] = Itoxd
        test_params[16] = N0_dead

        p.append(test_params)
        #mus[i,:] = [rA*gamA,rI*gamI]
        rs[i,:] = [rA*f,rI*f]

    parray = np.asarray(p)


    t_growth = np.linspace(0,72, num = 100)
    #simulate 128 cycles of serial enrichment
    #n_cycles_real = 12
    n_cycles = n_cycles_real + 1
    dilution_factor = 8;
    nk = np.zeros((n_cycles,n_strains))
    nk[0,:] = 0.01
    ndead = np.zeros((n_cycles,n_strains))
    ndead[0,:] = 0
    A0 = 2.0
    I0 = 0.0
    A_vals = np.zeros((n_cycles-1, len(t_growth)))
    I_vals = np.zeros((n_cycles-1, len(t_growth)))

    A = np.zeros(n_cycles)
    I = np.zeros(n_cycles)
    #idx = np.argsort(nk[-1,:])
    t_vals = []
    for k in range(1,n_cycles):
        t_vals.append(t_growth + (k-1)*t_growth[-1])
        #print('cycle ' + str(k))
        y0 = []
        for i in range(n_strains):
            y0.append(nk[k-1,i])
            y0.append(ndead[k-1,i])
        y0.append(A0*(1.0 - 1.0/dilution_factor)+A[k-1]/dilution_factor)
        y0.append(I0*(1.0 - 1.0/dilution_factor)+I[k-1]/dilution_factor)
        yh = ntm.denitODE(y0,t_growth,p,n_strains)
        A_vals[k-1,:] = yh[:,-2]
        I_vals[k-1,:] = yh[:,-1]
        for i in range(n_strains):
            nk[k,i] = yh[-1,i*2]/dilution_factor
            ndead[k,i] = yh[-1,i*2+1]/dilution_factor
            A[k] = yh[-1,-2]
            I[k] = yh[-1,-1]
            
    #print(nk[-1,:])   
    t_vals = np.asarray(t_vals)
    #t_vals.flatten()
    nk[-1,:] = nk[-1,:]/np.sum(nk[-1,:])
    rAs_avg, drs, num_roots = get_dr(parray[:,0], nk[-1,:], ab_thresh)
    idx = np.argsort(nk[-1,:])
    color = 'tab:olive'
    #axs[1][1].scatter(parray[idx,0],parray[idx,1],c=(nk[-1,idx]),cmap='Reds')
    if plot:
        plt.scatter(parray[:,0],parray[:,1],c=(nk[-1,:]),cmap='Reds', edgecolors = 'black')
        plt.set_xlabel('rA (mM/OD/hr)')
        plt.set_ylabel('rI (mM/OD/hr)')
        ax2 = plt.twinx()
        ax2.bar(parray[:,0], nk[-1,:], width = 3.0/n_strains, color = color, alpha = .75)
        ax2.set_ylim([0,0.4])
        ax2.set_ylabel('rel. ab.', color = color)
        ax2.tick_params(axis='y', labelcolor=color)
        #plt.title('max_idx='+str(max_idx)+', second_max_idx='+str(second_max_idx))
        plt.savefig(output_dir+'/k='+str(k)+'_rA_thresh='+str(rA_thresh)+'_f='+str(f)+'_I_tox_min='+str(I_tox_min)+'_I_tox_max='+str(I_tox_max)+'_n_strains='+str(n_strains)+'_ab_thresh='+str(ab_thresh)+'_rd_max='+str(rd_max)+'_n_cycles_real='+str(n_cycles_real)+'.png')  #k, rA_thresh, f, I_tox_min, I_tox_max, n_strains, ab_thresh, rd_max, n_cycles_real = 12
    #idx = np.argsort(nk[-1,:])
    p_dist = 0
    num_diffs = 0
    for i in range(len(nk[-1,:])):
        for j in range(len(nk[-1,:])):
            if i == j:
                pass
            else:
                p_dist = p_dist + 0.5*nk[-1,i] * nk[-1,j] * np.sqrt((parray[i,0] - parray[j,0])**2 + (parray[i,1] - parray[j,1])**2)
                num_diffs = num_diffs + 1
    #p_dist = p_dist/num_diffs
    return p_dist, num_roots
'''
